#!/usr/bin/env python3
"""
Pi Fan
"""

import argparse
from datetime import timedelta
from mylib import PiFanController, Monitor, IpmiCpu, IpmiFan


def parse_args():
    """
    Parse command line arguments.
    Return arguments.
    """
    parser = argparse.ArgumentParser(
        description='Dell PowerEdge fan speed controller for Raspberry Pi.',
        epilog=""
    )

    run_mode_group = parser.add_mutually_exclusive_group()
    run_mode_group.add_argument('--one', default=False, action='store_true',
                                help='Poll once and exit')
    run_mode_group.add_argument('--interval', type=int, metavar='SEC',
                                default=10,
                                help='Delay between polls (default: 10)')

    parser.add_argument('--idealtemp', type=float, metavar='DEG_C', default=40,
                        help='Ideal temperature (default: 40)')
    parser.add_argument('--maxtemp', type=float, metavar='DEG_C', default=75,
                        help='Max allowable temperature (default: 75)')
    parser.add_argument('--easing', metavar='TYPE', default='parabolic',
                        choices=['linear', 'parabolic'],
                        help='Fan speed easing type: linear | parabolic '
                             '(default: parabolic)')
    parser.add_argument('--sample-size', type=int, metavar='N', default=3,
                        help='Sample size of CPU temp average aggregation '
                             '(default: 3)')
    parser.add_argument('--dry-run', default=False, action='store_true',
                        help='Dry run: don\'t change server settings')
    parser.add_argument('host', metavar='HOST', help='Target host')
    parser.add_argument('username', metavar='USERNAME', help='Username')
    parser.add_argument('password', metavar='PASSWORD', help='Password')

    return parser.parse_args()


def main():
    """
    Program entrypoint.
    """
    args = parse_args()

    ipmi_fan = IpmiFan(args.host, args.username, args.password)
    ipmi_cpu = IpmiCpu(args.host, args.username, args.password)

    controller = PiFanController(args.host, ipmi_fan, ipmi_cpu)
    controller.ideal_temp = args.idealtemp
    controller.max_temp = args.maxtemp
    controller.easing = args.easing
    controller.dry_run = args.dry_run
    controller.sample_size = args.sample_size

    if args.one:
        # Single poll.
        state = controller.load_state()
        controller.poll(state)
    else:
        # Endless polling.
        state = controller.load_state()
        interval = timedelta(seconds=args.interval)
        monitor = Monitor(controller, interval)
        monitor.launch(state)


if __name__ == '__main__':
    main()
